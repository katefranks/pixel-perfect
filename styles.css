* {
  box-sizing: border-border-box;
}
body {
  background: #F5F4F4;
  font-family: sans-serif;
  margin: 0px;
  font-size:10px;
}

img {
  width: 100%;
}

/* header {
  display: inline-block;
} */

ul {
  padding: 0;
  list-style: none;
}
#main-header {
  background: #F9F8F8;
  border-bottom: 1px solid purple;
  /* border-bottom: 1px solid #E7E7E7; */
  height: 60px;
  width: 100VW;
}

#header-nav {
  display: inline-block;
  margin-top: 15px;
  margin-left: 150px;

}

.nav-list {
  display: flex;
  width: 315px;
  border: 1px solid goldenrod;
  justify-content: space-between;
}


.container {
  display: flex;

  width: 100VW;
}

.articles {
  display: flex;
  /* border: 1px solid goldenrod; */
  flex-direction: column;
  width: 62.5VW;
  align-items: flex-end;
  margin-top: 50px;
}

.article {
  border: 1px solid blue;
  height: 920px;
  width: 749px;
  text-align: center;
  margin-bottom: 48px;

}

#header-gvl {
  background-image: url(./images/greenville.jpeg);
  height: 51.2%;
}

#header-kites {
  background-image: url(./images/kites1.jpeg);
  height: 51.2%;
}

#header-launch {
  background-image: url(./images/launch.jpeg);
  height: 51.2%;
}

#header-cofee {
    background-image: url(./images/espresso.jpeg);
    height: 51.2%;
}

#header-awesome {
  background-image: url(./images/awesome1.jpeg);
  height: 51.2%;
}

.section-title {
  /* font: #CA5C3C; */
  margin-top: 48px;
  margin-bottom: 25px;
  font-family: 'Lato', sans-serif;
  font-size: 10px;
  letter-spacing: 1px;
  font-weight: bolder;
}

h2 {
  font-family: 'Oswald', sans-serif;
  font-size: 20px;
}

.article-content {
  font-size: 14px;
  margin-top: 25px;
  margin-left: 45px;
  margin-right: 45px;
  margin-bottom: 40px;
  line-height: 2;
}

.continue-reading {
  /* font: #CA5C3C; */
  margin-top: 45px;
  margin-left: 290px;
  margin-right: 290px;
  margin-bottom: 40px;
  padding: 14px;
  border: 1px solid #CA5C3C;

}

.article-footer {
  height: 85px;
  border-top: 1px solid #E7E7E7;
}

.asides {
  display: flex;
  /* border: 1px solid #BB7CD7; */
  flex-direction: column;
  width: 29VW;
  margin-top: 50px;
  /* align-items: flex-end; */
}

.aside {
  color: #444444;
  border: 1px solid green;
  height: 507px;
  width: 360px;
  margin-bottom: 38px;
  margin-left: 28px;
  text-align: center;
}

.aside-header {
  height: 70px;
  /* font-size: 15px; */
  /* margin-top: 30px; */
  /* margin: 0px; */
  border-bottom: 1px solid purple;
}

.aside-articles {

}

#aside1-header {
  background-image: url(./images/fluorfield.jpeg);
  height: 182px;
}

#aside1-h1 {
  margin-top: 110px;
}

#aside1-p {
  margin-top: 22px;
  font-size: 14px;
  line-height: 1.7;
  margin-left: 40px;
  margin-right: 40px;
}

#aside2 {
  height: 982px;
}

#aside2-header {
  height: 50px;
}

.aside-articles {
  display: flex;
  flex-direction: column;
  /* justify-content: space-around; */
  height: 920px;
  border: 1px solid goldenrod;
}

.aside-article {
  height: 296px;
  border: 1px solid magenta;
}

#aside3 {
  height: 515px;
}
#aside4 {
  height: 594px;
}

.ig-photos {
  display: flex;
  width: 100VW;
  height: 188px;
  margin-top: 29px;
  margin-left: 0px;
  border: 1px solid magenta;

}

.ig-photo {
  height: 188px;
  width: 12.5VW;
}

footer {
  height: 67px;
  background-color: mistyrose;

  /* background-color: #222222; */
}

#ig1 { background:#1abc9c;}
#ig2 { background:#3498db;}
#ig3 { background:#9b59b6;}
#ig4 { background:#34495e;}
#ig5 { background:#f1c40f;}
#ig6 { background:#e67e22;}
#ig7 { background:#e74c3c;}
#ig8 { background:#bdc3c7;}


/*
Google fonts:
-You can select different fonts.
-As you select them, it builds out a link tag on the right side.
-copy and past this link tag to use in your html
-Creating another link tag in the html. Link before YOUR css.
-shows you how to add fonts:
    font-family: 'Playfair Display' , serif;
    font-family: 'Source Sans Pro' , sans-serif;

Font Awesome:
  -Go to homepage, click on how to use. Need to sign up.
  -you can take icon and place it into your regular mark up
  -ex: search Facebook
  -At the top is code you would need to use in css to use in pseudo element (f39e)
  - next to it is another option to use as an "icon" element which you can drop into your html. Use them as text, basically like you would a <p> tag.
  -if throwing into a pseudo element this will be the content, need to use as a string and with /

CDNJS:
  - https://cdnjs.com/
  -search for "font awesome"
  -using font aswesome website instead will give you version 6 instead of 5.15.3, which will give you some more options.
  -copy link tag
  -this will be the href
  -copy and paste that url

*Pixel Perfect:
  -box on top right, can toggle on and off.
  -click "add your first layer"
  -go into documents, navigate to the image you were given.
  -open image and it will show up under layers
  -x & y  need to be set to zero.   This will align at top and left edge of window
  -arrow is browser size, you may need to change this, so that right edge matches up with the right edge of your browser.
  -if screen shot was taken from YOUR computer- then it should match at 1.
  -opacity will allow you to toggle back and forth between image you were given and what you're working on. Goal is to get it so that you can't tell a difference.
  -tool helps you to recreate website and get it as close to pixel perfect as possible.
  -may see a little bit of a difference as far as content of text, but font and spacing need to match.

  -advice: don't spend extended amount of time on one element- like getting certain letters to line up
  -don't spend entire day on header, go through it, create content, then go back and refactor.
  -get the big pieces of your puzzle where they need to go, and then fill them in.

  -bring in image, make sure 0 & 0 are set, image has slightly grey background, if you can see a sliver of white, then that's a sign that you may need to resize the image.

  -resize images to make them fit what you need them for. If they're a clients, make copy & then re-size.
 */

/*
FLEXBOX:

.container {
  border: 10px solid red;
  display: flex;
  height: 100VH;
}

.box {
width: 300px;

could also use width: 25%- it it's the entire viewport, and then you make them columns, this will create spaces in between. If you remove 25% it spreads them out.
}

-When you add "display: flex" default display for it's children will line them up in a row
-VH viewport height;
-display flex- width is 100% of PARENT
-display: inline-flex  -width is 100% width of CONTENT
-flex-direction: row (default is row, so it doesn't change anything)
-flex-direction: colomn (stacks them in a column)
-flex-direction: row-reverse;  (changes direction of content)
-flex-direction: column-reverse;  (changes direction of content)
-main axis vs cros axis for rows & columns (by default- flex direction row: main axis is left to right, cross axis is top to bottom)
-flexbox wrap: wraps content. For row- left to right. For column- left to right.

-box is child. If not enough room for their width, it resizes them. It will try to work with your width, but if not enough room it will resize so they fit.

- ordering:
    -The lower the number, the farther to the left it moves.
    -Default order of children is 0. Any that don't have an order assigned will keep order 0

    .box {
    flex: 1;
    This tells it to evenly distribute children.
    }
    .box3 {
      flex: 2; (this will make this child 2x as big as the other children)
      order: 2;
    }
    .box7 {
      order: 3;
    }
    .box9 {
      order: -1;
    }

 */
